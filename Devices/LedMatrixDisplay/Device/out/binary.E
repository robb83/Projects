# 1 "src\\main.c"
# 1 "D:\\Workspace\\led_display\\Device//"
# 1 "<command-line>"
# 1 "src\\main.c"
# 1 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\inttypes.h" 1 3
# 37 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\inttypes.h" 3
# 1 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\lib\\gcc\\avr\\4.8.1\\include\\stdint.h" 1 3 4
# 9 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\lib\\gcc\\avr\\4.8.1\\include\\stdint.h" 3 4
# 1 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\stdint.h" 1 3 4
# 121 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 142 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 159 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 213 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 273 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\lib\\gcc\\avr\\4.8.1\\include\\stdint.h" 2 3 4
# 38 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\inttypes.h" 2 3
# 77 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 2 "src\\main.c" 2
# 1 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\interrupt.h" 1 3
# 38 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\interrupt.h" 3
# 1 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\io.h" 1 3
# 99 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\sfr_defs.h" 1 3
# 100 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\io.h" 2 3
# 414 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\iotn2313.h" 1 3
# 658 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\iotn2313.h" 3
       
# 659 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\iotn2313.h" 3

       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
# 415 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\io.h" 2 3
# 616 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\portpins.h" 1 3
# 617 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\common.h" 1 3
# 619 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\version.h" 1 3
# 621 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\io.h" 2 3






# 1 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\fuse.h" 1 3
# 239 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
    unsigned char extended;
} __fuse_t;
# 628 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\io.h" 2 3


# 1 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\lock.h" 1 3
# 631 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\io.h" 2 3
# 39 "c:\\tools\\arduino-nightly\\hardware\\tools\\avr\\avr\\include\\avr\\interrupt.h" 2 3
# 3 "src\\main.c" 2
# 20 "src\\main.c"
volatile uint8_t buffer[64];
volatile uint8_t state = 0x00;
volatile uint8_t state_position = 0x00;
volatile uint8_t state_buffer[4];
volatile uint8_t pin_interrupts = 0xFF;
volatile uint8_t pin_changed = 0x00;

void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_11 (void) {
 uint8_t buttons = (*(volatile uint8_t *)((0x16) + 0x20)) & 0b00011000;

    pin_changed = buttons ^ pin_interrupts;
    pin_interrupts = buttons;
}

void __vector_7 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_7 (void) {
 if (state == 0x00) {
  state = (*(volatile uint8_t *)((0x0C) + 0x20));
  state_position = 0x00;
 } else if (state == 'A') {
  if (state_position < 64) {
   buffer[state_position++] = (*(volatile uint8_t *)((0x0C) + 0x20));
  }
 } else if (state == 'B') {
  if (state_position < 2) {
   state_buffer[state_position++] = (*(volatile uint8_t *)((0x0C) + 0x20));
  }
 } else if (state == 'C') {
  if (state_position < 2) {
   state_buffer[state_position++] = (*(volatile uint8_t *)((0x0C) + 0x20));
  }
 } else if (state == 'F') {
  if (state_position < 4) {
   state_buffer[state_position++] = (*(volatile uint8_t *)((0x0C) + 0x20));
  }
 } else if (state == 'G') {
  if (state_position < 4) {
   state_buffer[state_position++] = (*(volatile uint8_t *)((0x0C) + 0x20));
  }
 }
}

void uart_send(uint8_t data) {
  while ( !( (*(volatile uint8_t *)((0x0B) + 0x20)) & (1<<5)) );
  (*(volatile uint8_t *)((0x0C) + 0x20)) = data;
}

void display_clear(uint8_t v) {
 for(int i = 0; i < sizeof(buffer); ++i) {
  buffer[i] = v;
 }
}

void display_shift_right(void) {
 uint8_t r, c;
 for ( r = 0; r < (16); ++r) {

  uint8_t t1 = 0;
  for( c = r * ((32) / (8)); c < r * ((32) / (8)) + 4; ++c) {
   uint8_t t2 = buffer[c];

   uint8_t t3 = (t2 & 0b00000001) << 7;

   t2 = (t2 >> 1) & 0b01111111;
   t2 = t2 | t1;

   buffer[c] = t2;

   t1 = t3;
  }
 }
}

void display_shift_left(void) {
 int8_t r, c;
 for ( r = 0; r < (16); ++r) {

  uint8_t t1 = 0;
  for( c = (((32) / (8)) - 1); c >= 0; --c) {
   uint8_t t2 = buffer[r * ((32) / (8)) + c];

   uint8_t t3 = (t2 & 0b10000000) >> 7;

   t2 = (t2 << 1) & 0b11111110;
   t2 = t2 | t1;

   buffer[r * ((32) / (8)) + c] = t2;

   t1 = t3;
  }
 }
}

void display_shift_up(void) {
 uint8_t r;
 for( r = 0; r < (((16) - 1) * ((32) / (8))); ++r) {
  buffer[r] = buffer[r + 4];
 }
 for( r = (((16) - 1) * ((32) / (8))); r < sizeof(buffer); ++r) {
  buffer[r] = 0x00;
 }
}

void display_shift_down(void) {
 int8_t r;
 for( r = (((16) - 1) * ((32) / (8))) - 1; r >= 0; --r) {
  buffer[r + ((32) / (8))] = buffer[r];
 }
 for( r = 0; r < ((32) / (8)); ++r) {
  buffer[r] = 0x00;
 }
}

void display_plotting(void) {
 static uint8_t r = 0;
 static uint8_t c = 0;
 static uint8_t b = 0;

 for ( r = 0; r < (16); ++r) {
  for( c = 0; c < ((32) / (8)); ++c) {
   for(b = 0; b < (8); ++b) {
    (*(volatile uint8_t *)((0x18) + 0x20)) &= ~(1 << (2));

    if (buffer[r * 4 + c] & (1 << (7 - b)))
     (*(volatile uint8_t *)((0x18) + 0x20)) &= ~(1 << (0));
    else
     (*(volatile uint8_t *)((0x18) + 0x20)) |= (1 << (0));

    (*(volatile uint8_t *)((0x18) + 0x20)) |= (1 << (2));
   }
  }

  (*(volatile uint8_t *)((0x12) + 0x20)) |= (1 << (6));

  (*(volatile uint8_t *)((0x12) + 0x20)) = ((*(volatile uint8_t *)((0x12) + 0x20)) & 0b11000011) | ((r & 0b00001111) << 2);

  (*(volatile uint8_t *)((0x18) + 0x20)) &= ~(1 << (1));
  (*(volatile uint8_t *)((0x18) + 0x20)) |= (1 << (1));

  (*(volatile uint8_t *)((0x12) + 0x20)) &= ~(1 << (6));
 }
}

int main(void) {


 (*(volatile uint8_t *)((0x2E) + 0x20)) |= (1 << 0) | (1 << 1);

 (*(volatile uint8_t *)((0x09) + 0x20)) = (((8000000L / (250000 * 16UL))) - 1);
 (*(volatile uint8_t *)((0x02) + 0x20)) = ((((8000000L / (250000 * 16UL))) - 1) >> 8);
 (*(volatile uint8_t *)((0x0A) + 0x20)) = ((1<<3) | (1<<4) | (1 << 7));

 (*(volatile uint8_t *)((0x11) + 0x20)) = 0b01111110;
 (*(volatile uint8_t *)((0x17) + 0x20)) = 0b00000111;

 (*(volatile uint8_t *)((0x18) + 0x20)) |= (( 1 << 3 ) | ( 1 << 4 ));
 (*(volatile uint8_t *)((0x20) + 0x20)) |= (( 1 << 3 ) | ( 1 << 4 ));
 (*(volatile uint8_t *)((0x3B) + 0x20)) |= ( 1 << 5 );


 display_clear(0x00);
 buffer[(34) - ((32) / (8)) - 1] = 0b00000001;
 buffer[(34) - ((32) / (8))] = 0b10000000;
 buffer[(34) - 1] = 0b00000001;
 buffer[(34)] = 0b10000000;


 __asm__ __volatile__ ("sei" ::: "memory");

    while (1) {

  if (pin_changed) {
   uart_send('Z');
   uart_send(pin_interrupts);


   if (((pin_changed & (1 << 3)) && (pin_interrupts & (1 << 3) ))) {
    if (state == 'Y') {
     display_clear(0x00);
     state = 0x00;
    } else {
     if (state != 0x00) {
      uart_send(state);
     }
     state = 'Y';
     display_clear(0xFF);
    }
   }

   pin_changed = 0x00;
  }


  if (state == 0x00 || state == 'Y') {
   display_plotting();


  } else if (state == 'A') {
   if (state_position >= 64) {
    state = 0x00;
    uart_send('A');
   }


  } else if (state == 'B') {
   if (state_position >= 2) {
    uint8_t a = state_buffer[0];
    uint8_t b = state_buffer[1];

    display_shift_right();
    for (uint8_t c = 0; c < (8); ++c) {
     uint8_t d = buffer[c * ((32) / (8))];
     if (a & (1 << (((8) - 1) - c))) {
      d |= 0b10000000;
     }
     buffer[c * ((32) / (8))] = d;
    }
    for (uint8_t c = 0; c < (8); ++c) {
     uint8_t d = buffer[(c + (8)) * ((32) / (8))];
     if (b & (1 << (((8) - 1) - c))) {
      d |= 0b10000000;
     }
     buffer[(c + (8)) * ((32) / (8))] = d;
    }
    state = 0x00;
    uart_send('B');
   }


  } else if (state == 'C') {
   if (state_position >= 2) {
    uint8_t a = state_buffer[0];
    uint8_t b = state_buffer[1];

    display_shift_left();
    for (uint8_t c = 0; c < (8); ++c) {
     uint8_t d = buffer[c * ((32) / (8)) + (((32) / (8)) - 1)];
     if (a & (1 << (((8) - 1) - c))) {
      d |= 0b00000001;
     }
     buffer[c * ((32) / (8)) + (((32) / (8)) - 1)] = d;
    }
    for (uint8_t c = 0; c < (8); ++c) {
     uint8_t d = buffer[(c + (8)) * ((32) / (8)) + (((32) / (8)) - 1)];
     if (b & (1 << (((8) - 1) - c))) {
      d |= 0b00000001;
     }
     buffer[(c + (8)) * ((32) / (8)) + (((32) / (8)) - 1)] = d;
    }
    state = 0x00;
    uart_send('C');
   }


  } else if (state == 'D') {
   display_clear(0x00);
   state = 0x00;
   uart_send('D');


  } else if (state == 'E') {
   display_clear(0xFF);
   state = 0x00;
   uart_send('E');


  } else if (state == 'F') {
   if (state_position >= 4) {
    display_shift_down();
    buffer[0] = state_buffer[0];
    buffer[1] = state_buffer[1];
    buffer[2] = state_buffer[2];
    buffer[3] = state_buffer[3];

    state = 0x00;
    uart_send('F');
   }


  } else if (state == 'G') {
   if (state_position >= 4) {
    display_shift_up();
    buffer[(((16) - 1) * ((32) / (8))) + 0] = state_buffer[0];
    buffer[(((16) - 1) * ((32) / (8))) + 1] = state_buffer[1];
    buffer[(((16) - 1) * ((32) / (8))) + 2] = state_buffer[2];
    buffer[(((16) - 1) * ((32) / (8))) + 3] = state_buffer[3];

    state = 0x00;
    uart_send('G');
   }


  } else {
   uint8_t temp = state;
   state = 0x00;
   uart_send(temp);
  }
    }

    return (0);
}
